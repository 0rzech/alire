DESIGN PRINCIPLES:
    Minimal user hassle => Provide a library/app name to build => Alire must contain a map [Name -> Repo]
    Don't force pollution of maintainer code => no extra information/tags for alire
        => Submissions to alire must be merge requests of the relevant information
    Also, alire must be able to understand origins that are uncatalogued (giving the URL/PATH) for developers working on their own libraries, prior to official incorporation

Search path of project-alire.ads file, in order:
    In current folder
    In any immediate subfolder

BOOTSTRAP
    $ curl -sSf https://static.rust-lang.org/rustup.sh | sh

COMMANDS for 1.0

Legend:
* implemented

* build: requires (project)
    upgrade:
    compile:

* clean: requires (project)
    gprclean with alire agg project

* compile: requires (project, buildfile)
    generate (if needed)
    Launch gprbuild as-is

* get: 
    clone repo of the given project
    if project-alire.ads does not exist, generate it
    generate:
    build: (if --build)

* init: 
    Prepares a new project with given name in name folder
    --bin or --lib mandatory
    generates skeleton files (unless --no-skel):
        project.ad{s,b}
        project.gpr

* lock: requires (project)
    overwrite project-alire.ads with current exact dependencies

* run: requires (project)
    compile:
    launch if only one executable found

* search: 
    list libraries with a substring in their name
    -v: show versions

* update:
    Gets latest index & alr app (not --offline)
    Recompute dependencies from project-alire.ads
    fetch: every newest dependency
    generate GPR file
